{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
synopsis:            A Program Synposis
description:         A Program Description
homepage:            https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:             BSD3
license-file:        LICENSE
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

library
  hs-source-dirs:     src
  exposed-modules:    Lib
  build-depends:      base >= 4.7 && < 5
                    , mtl
                    , bytestring
                    , text
                    , containers
  default-language:   Haskell2010
  default-extensions: GADTs
                    , OverloadedStrings
                    , LambdaCase
                    , RankNTypes
                    , FlexibleContexts
                    , FlexibleInstances
                    , ScopedTypeVariables
                    , TypeApplications
                    , TypeFamilies
                    , BangPatterns
                    , ExistentialQuantification
                    , FunctionalDependencies
                    , MultiParamTypeClasses
                    , DeriveFunctor
                    , GeneralizedNewtypeDeriving
                    , DeriveGeneric

executable {{name}}
  hs-source-dirs:      app
  main-is:             Main.hs
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  build-depends:       base
                     , {{name}}
  default-language:    Haskell2010

test-suite {{name}}-test
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Spec.hs
  build-depends:       base
                     , {{name}}
                     , hspec
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE app/Main.hs #-}
module Main where
import qualified Lib

main :: IO ()
main = Lib.libMain

{-# START_FILE src/Lib.hs #-}
module Lib (libMain) where
import qualified App
import qualified Control.Monad.IO.Class as IO

libMain :: IO ()
libMain = runApp defaultConfig $ do
  IO.liftIO $ putStrLn "Hello, World"

{-# START_FILE src/App.hs #-}
module App where
import Control.Monad.Except
import Control.Monad.Reader
import Control.Monad.Fail

-- | The AppT monad represents the application state
newtype AppT m a = AppT
  { runAppT :: ExceptT AppException (ReaderT Cfg m) a
  } deriving (Functor,Applicative,Monad,MonadIO,MonadReader Cfg, MonadError AppException)

-- | Add exception types here
data AppException = GeneralException String deriving (Eq, Show)

-- | Cfg contains the configured state of the application
data Cfg = Cfg